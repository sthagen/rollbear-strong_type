        * operator() is now noexcept if the underlying type has a
          noexcept operator (). Thanks Björn Schäpers @HazardyKnusperkeks

        * Use github-actions for CI

v2 2020-07-13

        * Fixed strong::underlying_type<T> for CRTP defined strong type T

        * Added strong::ordered_with<Ts...> for cross-type ordering
          relations.

        * Added strong::equality_with<Ts...> for cross-type equality
          comparison operators.

        * Added strong::unique modifier for creating move-only types

v1 2020-07-11

        * Moved to Boost Software License (BSL) 1.0 license

        * Added convertible_to<Ts...> and implicitly_convertible_to<Ts...>
          modifiers.

        * Added strong::uninitialized for when you *want* to create a
          variable with unitialized value. Unlike the built in types,
          this is explicitly visible at the site of use.

        * Moved many namespace scope functions as inline friends to
          avoid ADL issues.

        * Added strong::semiregular and strong::regular since they are
          such frequently seen good defaults.

        * Many internal improvements and compiler bug work-arounds.

        * Added strong::iterator and strong::range modifiers.

        * More noexcept() specifiers

        * Removed strong::unique and strong::scoped. They are different
          beasts that don't feel quite at home here. Thanks Adi Shavit.

0.0.1 2017-09-30

        * First announcement
